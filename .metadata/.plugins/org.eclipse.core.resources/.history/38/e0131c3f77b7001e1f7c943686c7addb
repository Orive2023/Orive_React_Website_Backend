package com.orive.orive_website.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.orive.orive_website.DTO.JournalsDetailsDto;
import com.orive.orive_website.Entity.JournalsDetailsEntity;
import com.orive.orive_website.Repository.JournalsDetailsRepository;



@Service
public class JournalsDetailsService {

	private static final Logger logger = LoggerFactory.getLogger(JournalsDetailsService.class);
	  
	  @Autowired
	  private JournalsDetailsRepository journalsDetailsRepository; 
	  
	  @Autowired
	  private ModelMapper modelMapper;
	  
	//Create
	  public JournalsDetailsDto createJournalsDetails(ReachUsDto reachUsDto) {
		  ReachUsEntity reachUsEntity = convertToEntity(reachUsDto);
		  ReachUsEntity savedReachUs = reachUsRepository.save(reachUsEntity);
	      logger.info("Created JournalsDetails with ID: {}", savedReachUs.getReachUsId());
	      return convertToDTO(savedReachUs);
	  }

	  // Read
	  public List<ReachUsDto> getAllReachUs() {
	      List<ReachUsEntity> reachUsEntities = reachUsRepository.findAll();
	      logger.info("Retrieved {} JournalsDetails from the database", reachUsEntities.size());
	      return reachUsEntities.stream()
	              .map(this::convertToDTO)
	              .collect(Collectors.toList());
	  }
	  
	  //get by JournalsDetailsId
	  public Optional<ReachUsDto> getReachUsId(Long reachUsId) {
	      Optional<ReachUsEntity> reachUs = reachUsRepository.findById(reachUsId);
	      if (reachUs.isPresent()) {
	          return Optional.of(convertToDTO(reachUs.get()));
	      } else {
	          logger.warn("JournalsDetails with ID {} not found", reachUsId);
	          return Optional.empty();
	      }
	  }
	  
	  
	// Update list by id
	  public JournalsDetailsDto updateJournalsDetails(Long journalsDetailsId, JournalsDetailsDto journalsDetailsDto) {
	      Optional<JournalsDetailsEntity> existingJournalsDetailsOptional = journalsDetailsRepository.findById(journalsDetailsId);
	      if (existingJournalsDetailsOptional.isPresent()) {
	    	  JournalsDetailsEntity existingReachUs= existingReachUsOptional.get();
	      	  modelMapper.map(reachUsDto, existingReachUsOptional);
	      	ReachUsEntity updatedReachUs = reachUsRepository.save(existingReachUs);
	          logger.info("Updated JournalsDetails with ID: {}", updatedReachUs.getReachUsId());
	          return convertToDTO(updatedReachUs);
	      } else {
	          logger.warn("JournalsDetails with ID {} not found for update", reachUsId);
	          return null;
	      }
	  }
	  
	  // Delete
	  public void deleteJournalsDetails(Long journalsDetailsId) {
		  journalsDetailsRepository.deleteById(journalsDetailsId);
	      logger.info("Deleted JournalsDetails with ID: {}", journalsDetailsId);
	  }

	  //count the total JournalsDetails
	  public long countJournalsDetails()
		 {
			 return journalsDetailsRepository.count();
		 }
	  
		// Helper method to convert JournalsDetailsDto to JournalsDetailsEntity
	  private JournalsDetailsEntity convertToEntity(JournalsDetailsDto journalsDetailsDto)
	  {
	  	return modelMapper.map(journalsDetailsDto, JournalsDetailsEntity.class);
	  }

	 // Helper method to convert JournalsDetailsEntity  to JournalsDetailsDto
	  private JournalsDetailsDto convertToDTO(JournalsDetailsEntity journalsDetailsEntity) {
	      return modelMapper.map(journalsDetailsEntity, JournalsDetailsDto.class);
	  }
}

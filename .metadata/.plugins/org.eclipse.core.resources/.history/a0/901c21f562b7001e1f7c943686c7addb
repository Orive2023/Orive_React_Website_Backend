package com.orive.orive_website.Service;

import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.orive.orive_website.DTO.CareersGetJobAlertsDto;
import com.orive.orive_website.Entity.CareersGetJobAlertsEntity;
import com.orive.orive_website.Repository.CareersGetJobAlertsRepository;


@Service
public class CareersGetJobAlertsService {
	
  private static final Logger logger = LoggerFactory.getLogger(CareersGetJobAlertsService.class);
  
  @Autowired
  private CareersGetJobAlertsRepository careersGetJobAlertsRepository; 
  
  @Autowired
  private ModelMapper modelMapper;
  
//Create
  public CareersGetJobAlertsDto createCareersGetJobAlerts(CareersGetJobAlertsDto careersGetJobAlertsDto) {
	  CareersGetJobAlertsEntity careersGetJobAlertsEntity = convertToEntity(careersGetJobAlertsDto);
	  CareersGetJobAlertsEntity savedCareersGetJobAlerts = careersGetJobAlertsRepository.save(careersGetJobAlertsEntity);
      logger.info("Created CareersGetJobAlerts with ID: {}", savedCareersGetJobAlerts.getCareersGetJobAlertsId());
      return convertToDTO(savedCareersGetJobAlerts);
  }

  // Read
  public List<WorkSheetDto> getAllWorkSheets() {
      List<WorkSheetEntity> workSheetEntities = workSheetRepository.findAll();
      logger.info("Retrieved {} WorkSheet from the database", workSheetEntities.size());
      return workSheetEntities.stream()
              .map(this::convertToDTO)
              .collect(Collectors.toList());
  }
  
  //get by WorkSheetId
  public Optional<WorkSheetDto> getWorkSheetId(Long WorkSheetId) {
      Optional<WorkSheetEntity> workSheet = workSheetRepository.findById(WorkSheetId);
      if (workSheet.isPresent()) {
          return Optional.of(convertToDTO(workSheet.get()));
      } else {
          logger.warn("WorkSheet with ID {} not found", WorkSheetId);
          return Optional.empty();
      }
  }
  
  
  
//get by employeeId
  public List<WorkSheetDto> getEmployeeId(Long employeeId) {
      List<WorkSheetEntity> employees = workSheetRepository.findByEmployeeId(employeeId);

      if (employees.isEmpty()) {
          logger.warn("WorkSheet with ID {} not found", employeeId);
          return Collections.emptyList();
      }

      return employees.stream()
              .map(this::convertToDTO)
              .collect(Collectors.toList());
  } 
  
  
// Update list by id
  public CareersGetJobAlertsDto updateCareersGetJobAlerts(Long careersGetJobAlertsId, CareersGetJobAlertsDto careersGetJobAlertsDto) {
      Optional<CareersGetJobAlertsEntity> existingCareersGetJobAlertsOptional = careersGetJobAlertsRepository.findById(WorkSheetId);
      if (existingWorkSheetOptional.isPresent()) {
      	WorkSheetEntity existingWorkSheet= existingWorkSheetOptional.get();
      	existingWorkSheet.setStatus(workSheetDto.getStatus());
      	modelMapper.map(workSheetDto, existingWorkSheetOptional);
          WorkSheetEntity updatedWorkSheet = workSheetRepository.save(existingWorkSheet);
          logger.info("Updated CareersGetJobAlerts with ID: {}", updatedWorkSheet.getWorkSheetId());
          return convertToDTO(updatedWorkSheet);
      } else {
          logger.warn("CareersGetJobAlerts with ID {} not found for update", WorkSheetId);
          return null;
      }
  }
  
  // Delete
  public void deleteCareersGetJobAlerts(Long careersGetJobAlertsId) {
	  careersGetJobAlertsRepository.deleteById(careersGetJobAlertsId);
      logger.info("Deleted CareersGetJobAlerts with ID: {}", careersGetJobAlertsId);
  }

  //count the total CareersGetJobAlerts
  public long countCareersGetJobAlerts()
	 {
		 return careersGetJobAlertsRepository.count();
	 }
  
	// Helper method to convert CareersGetJobAlertsDto to CareersGetJobAlertsEntity
  private CareersGetJobAlertsEntity convertToEntity(CareersGetJobAlertsDto careersGetJobAlertsDto)
  {
  	return modelMapper.map(careersGetJobAlertsDto, CareersGetJobAlertsEntity.class);
  }

 // Helper method to convert CareersGetJobAlertsEntity  to CareersGetJobAlertsDto
  private CareersGetJobAlertsDto convertToDTO(CareersGetJobAlertsEntity careersGetJobAlertsEntity) {
      return modelMapper.map(careersGetJobAlertsEntity, CareersGetJobAlertsDto.class);
  }

}
